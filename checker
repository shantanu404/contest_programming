#!/usr/bin/env python3
import os
import shutil
from argparse import ArgumentParser

COMPILER = {
        '.c': 'gcc -Wall -Wextra -g -o bin/{0} src/{0}.c && ./bin/{0} < inputs/{0}.in',
        '.cpp': 'g++ -std=c++11 -Wall -Wextra -g -o bin/{0} src/{0}.cpp && ./bin/{0} < inputs/{0}.in',
        '.py': 'python src/{0}.py < inputs/{0}.in',
        '.go': 'go run src/{0}.go < inputs/{0}.in',
        '.rs': 'rustc src/{0}.rs -o bin/{0} && ./bin/{0} < inputs/{0}.in',
        }

def run_solution(filename):
    try:
        prefix, ext = os.path.splitext(filename)
        prefix = prefix.split('/')[-1]
        compiler_commad = COMPILER[ext].format(prefix)
    except(Exception):
        print("Invalid filename")
        return

    if not os.path.exists('bin/'):
        os.makedirs('bin/')

    print(compiler_commad)
    os.system(compiler_commad)


def clean_dirs():
    if os.path.exists('bin/'):
        for f in os.listdir('bin/'):
            os.remove('bin/' + f)
    else:
        os.makedirs('bin/')

def main():
    parser = ArgumentParser(description='Solution manager for CP.')

    parser.add_argument('solution', metavar='solution', type=str, nargs='?',
            help='The complete filename of the solution')

    parser.add_argument('--clean', action='store_true', default=False,
            help='Same as `rm -rf bin/`')

    args = parser.parse_args()
    if args.clean:
        clean_dirs()
        return

    solution_file = args.solution
    if solution_file == None:
        parser.print_help()
        return

    run_solution(solution_file)

if __name__ == '__main__':
    main()

